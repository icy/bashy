#!/usr/bin/env bash

# Date    : 2019-09-06
# Author  : Ky-Anh Huynh
# Purpose : wrapper for all k8s commands/clusters

# Ideas
#
#   1. Hook up $HOME variable
#   2. Explicitly avoid kind of human mistakes when dealing with
#       multiple clusters and namespaces
#   3. To use with/by non-human scripts ;)
#
# Usage
#
# 1. Initialize clusters' root
#
#   $ mkdir ~/projects/gk8s/<cluster-name>
#   $ cd ~/projects/gk8s/<cluster-name>
#   $ touch .gk8s
#
# 2. Provision aws configurations
#
#   $ ln -s ~/.aws .aws
#
# 3. Provision k8s configurations
#
#   $ ln -s ~/.kube .kube
#
#   Specify the default namespace. Default to `default` ;)
#
#   $ echo my-default-namespace > .gk8s
#
# 4. Optionally create an shortcut
#
#   $ ln -s ~/projects/gk8s/<cluster-name> ~/bin/gk8s-<cluster-name>
#
# 5. Invoke the command
#
#   $ gk8s get pods      # on the default namespace,
#                        # on namespace specified in `.gk8s`
#   $ gk8s get pods @%   # on all namespaces
#
#   You can move around and execute your alias command instead
#
#   $ cd /my/parent/home
#   $ gk8s-<cluster-name> get pods
#
#
#  `kubectl` is injected when you are not specifed them as your first
#  argument. E.g, `gk8s get pods` is the same as `gk8s kubectl get pods`.
#

_log2() {
  [[ "${VERBOSE:-0}" -ge 2 ]] || return 0
  echo >&2 ":: ${*}"
}

_basename="${0##*/}"
case "$_basename" in
"gk8s" )
  _CLUSTER="$(pwd)"
  _CLUSTER="${_CLUSTER##*/}"
  ;;

"gk8s-"*)
  _CLUSTER="${_basename#*-}"
  cd "$HOME/projects/gk8s/$_CLUSTER" || exit
  ;;
esac

if [[ ! -f ".gk8s" ]]; then
  echo >&2 "... Missing .gk8s file in working directory ($(pwd)). Giving up."
  exit 1
fi

_help() {
  echo >&2 ":: Please specify a command."
}

if [[ "$#" -eq 0 ]]; then
  set -- _help
fi

# Getting namespace from the file .gk8s
source .gk8s || true
_ns="--namespace ${GK8S_NAMESPACE:-default}"

case "${1:-}" in
"kubectl"*|"helm"*|_help)
  ;;
"--")
  shift;
  ;;
*)
  set -- kubectl "$@"
  ;;
esac

# Insert the namespace configuration...
_cmd1="$1";
case "$_cmd1" in
kubectl.*)

  shift;
  _cmd2="$1"; shift;
  set -- "$_cmd1" "$_cmd2" $_ns "$@"
  ;;
esac

_oargs=( "$@" )
_start=0
while [[ "$_start" -le "${#_oargs}" ]]; do
  if [[ "${_oargs[$_start]}" == "@%" ]]; then
    _oargs["$_start"]="--all-namespaces"
  fi
  (( _start ++ ))
done

set -- "${_oargs[@]}"
export OHOME="$HOME"
export HOME="$(pwd)"

# Print heading...
_log2 ":: Cluster: $_CLUSTER, input namespace: $_ns"
_log2 ":: WDir: $(pwd)"
_log2 ":: Command: $@"
_log2 ":: OHOME: $OHOME"
_log2 ":: NHOME: $HOME"

if grep -qsEe "[[:space:]]delete[[:space:]]" <<< $* ; then
  if [[ ! -f ".delete" ]]; then
    echo >&2 ":: Action delete was requested but confirmation file (.delete) not found"
    echo >&2 ":: Working directory: $(pwd)"
    exit 127
  fi
  _log2 ":: Removing confirmation file: $(pwd)/.delete"
  rm -fv .delete
fi
[[ "${VERBOSE:-0}" -ge 2 ]] && set -x
"${@}"
